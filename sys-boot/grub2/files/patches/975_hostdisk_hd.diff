Description: Adjust hostdisk id for hard disks
 This allows grub-setup to use its standard workaround for broken BIOSes.
Author: Colin Watson <cjwatson@ubuntu.com>
Bug: http://savannah.gnu.org/bugs/?29464
Bug-Ubuntu: https://bugs.launchpad.net/bugs/555500
Forwarded: http://savannah.gnu.org/bugs/?29464
Last-Update: 2010-04-08


只在 grub2-1.98-ylmf2.new 存在：id
diff -ur grub2-1.98-ylmf2/util/hostdisk.c grub2-1.98-ylmf2.new/util/hostdisk.c
--- grub2-1.98-ylmf2/util/hostdisk.c	2010-03-07 04:51:37.000000000 +0800
+++ grub2-1.98-ylmf2.new/util/hostdisk.c	2011-05-25 17:32:27.266159211 +0800
@@ -173,6 +173,8 @@
 
   disk->has_partitions = 1;
   disk->id = drive;
+  if (strncmp (map[drive].drive, "hd", 2) == 0)
+     disk->id += 0x80;
 
   /* Get the size.  */
 #if defined(__MINGW32__)
@@ -335,9 +337,9 @@
     int is_partition = 0;
     char dev[PATH_MAX];
 
-    strcpy (dev, map[disk->id].device);
+    strcpy (dev, map[disk->id & 0x7f].device);
     if (disk->partition && sector >= disk->partition->start
-	&& strncmp (map[disk->id].device, "/dev/", 5) == 0)
+         && strncmp (map[disk->id & 0x7f].device, "/dev/", 5) == 0)
       is_partition = linux_find_partition (dev, disk->partition->start);
 
     /* Open the partition.  */
@@ -375,7 +377,7 @@
     }
 #endif
 
-  fd = open (map[disk->id].device, flags);
+ fd = open (map[disk->id & 0x7f].device, flags);
 
 #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
   if (! (sysctl_oldflags & 0x10)
@@ -389,12 +391,12 @@
 #if defined(__APPLE__)
   /* If we can't have exclusive access, try shared access */
   if (fd < 0)
-    fd = open(map[disk->id].device, flags | O_SHLOCK);
+  	fd = open(map[disk->id & 0x7f].device, flags | O_SHLOCK);
 #endif
 
   if (fd < 0)
     {
-      grub_error (GRUB_ERR_BAD_DEVICE, "cannot open `%s' in open_device()", map[disk->id].device);
+      grub_error (GRUB_ERR_BAD_DEVICE, "cannot open `%s' in open_device()", map[disk->id & 0x7f].device);
       return -1;
     }
 #endif /* ! __linux__ */
@@ -412,7 +414,7 @@
     offset = (loff_t) sector << GRUB_DISK_SECTOR_BITS;
     if (_llseek (fd, offset >> 32, offset & 0xffffffff, &result, SEEK_SET))
       {
-	grub_error (GRUB_ERR_BAD_DEVICE, "cannot seek `%s'", map[disk->id].device);
+        grub_error (GRUB_ERR_BAD_DEVICE, "cannot seek `%s'", map[disk->id & 0x7f].device);
 	close (fd);
 	return -1;
       }
@@ -423,7 +425,7 @@
 
     if (lseek (fd, offset, SEEK_SET) != offset)
       {
-	grub_error (GRUB_ERR_BAD_DEVICE, "cannot seek `%s'", map[disk->id].device);
+        grub_error (GRUB_ERR_BAD_DEVICE, "cannot seek `%s'", map[disk->id & 0x7f].device);
 	close (fd);
 	return -1;
       }
@@ -521,7 +523,7 @@
 	 parts. -jochen  */
       if (nread (fd, buf, GRUB_DISK_SECTOR_SIZE) != GRUB_DISK_SECTOR_SIZE)
 	{
-	  grub_error (GRUB_ERR_READ_ERROR, "cannot read `%s'", map[disk->id].device);
+	  grub_error (GRUB_ERR_READ_ERROR, "cannot read `%s'", map[disk->id & 0x7f].device);
 	  close (fd);
 	  return grub_errno;
 	}
@@ -533,7 +535,7 @@
 
   if (nread (fd, buf, size << GRUB_DISK_SECTOR_BITS)
       != (ssize_t) (size << GRUB_DISK_SECTOR_BITS))
-    grub_error (GRUB_ERR_READ_ERROR, "cannot read from `%s'", map[disk->id].device);
+      grub_error (GRUB_ERR_READ_ERROR, "cannot read from `%s'", map[disk->id & 0x7f].device);
 
   close (fd);
   return grub_errno;
@@ -568,7 +570,7 @@
 
   if (nwrite (fd, buf, size << GRUB_DISK_SECTOR_BITS)
       != (ssize_t) (size << GRUB_DISK_SECTOR_BITS))
-    grub_error (GRUB_ERR_WRITE_ERROR, "cannot write to `%s'", map[disk->id].device);
+     grub_error (GRUB_ERR_WRITE_ERROR, "cannot write to `%s'", map[disk->id & 0x7f].device);
 
   close (fd);
   return grub_errno;
