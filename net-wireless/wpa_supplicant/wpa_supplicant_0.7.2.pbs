#
# YLmf_OS package build script
#

DESCRIPTION=" IEEE 802.1X/WPA supplicant for secure wireless transfers"
HOMEPAGE="http://hostap.epitest.fi/wpa_supplicant/"
REPO="testing"
LICENSE="GPL-2 BSD"
PACKAGER="<ylmfos@115.com>"
SRC_URI="http://hostap.epitest.fi/releases/"$N-$V$R".tar.gz"

RDEPEND=""
BDEPEND=" dbus "
RECOMMENDED=""

NOTES="
If this is a clean installation of wpa_supplicant, you
have to create a configuration file named
/etc/wpa_supplicant/wpa_supplicant.conf
An example configuration file is available for reference in
/usr/share/doc/"$N-$V$R"
if build with madwifi, see
This package compiles against the headers installed by
madwifi-old, madwifi-ng or madwifi-ng-tools.
You should re-install ${N} after upgrading these packages.
fi
"

pbs_unpack() {
        ypkg_unpack
}

pbs_config() {
	/$N
	#
	#cp defconfig .config #&&
	#cat >> .config << "EOF" 
	#patchs
	patch -p0 -i $FILES_PATH/files/ylmfos-wpa_supplicant-0.7.2.conf.patch
	patch -p1 -i $FILES_PATH/files/"do-not-call-dbus-functions-with-NULL-path.patch"
	patch -p1 -i $FILES_PATH/files/fix-ssid-combo.patch
	patch -p1 -i $FILES_PATH/files/wpa_supplicant-0.7.2-no-crash.patch
	#configure
	# Toolchain setup
	#echo "CC = $(tc-getCC)" > .config
	echo "cc"		.config
	# Basic setup
	echo "CONFIG_CTRL_IFACE=y" >> .config
	echo "CONFIG_BACKEND=file" >> .config
	# Basic authentication methods
	# NOTE: we don't set GPSK or SAKE as they conflict with the below options
	echo "CONFIG_EAP_GTC=y"         >> .config
	echo "CONFIG_EAP_MD5=y"         >> .config
	echo "CONFIG_EAP_OTP=y"         >> .config
	echo "CONFIG_EAP_PAX=y"         >> .config
	echo "CONFIG_EAP_PSK=y"         >> .config
	echo "CONFIG_EAP_TLV=y"         >> .config
	echo "CONFIG_IEEE8021X_EAPOL=y" >> .config
	echo "CONFIG_PKCS12=y"          >> .config
	echo "CONFIG_PEERKEY=y"         >> .config
	echo "CONFIG_EAP_LEAP=y"        >> .config
	echo "CONFIG_EAP_MSCHAPV2=y"    >> .config
	echo "CONFIG_EAP_PEAP=y"        >> .config
	echo "CONFIG_EAP_TLS=y"         >> .config
	echo "CONFIG_EAP_TTLS=y"        >> .config
	#if use dbus ; then
	echo "CONFIG_CTRL_IFACE_DBUS=y" >> .config
	#fi
	#if use debug ; then
	#echo "CONFIG_DEBUG_FILE=y" >> .config
	#fi
	#if use eap-sim ; then
	# Smart card authentication
	echo "CONFIG_EAP_SIM=y"       >> .config
	echo "CONFIG_EAP_AKA=y"       >> .config
	echo "CONFIG_EAP_AKA_PRIME=y" >> .config
	#echo "CONFIG_PCSC=y"          >> .config
	#fi
	#if use fasteap ; then
	echo "CONFIG_EAP_FAST=y" >> .config
	#fi
	#if use readline ; then
	# readline/history support for wpa_cli
	echo "CONFIG_READLINE=y" >> .config
	#fi
	# SSL authentication methods
	#if use ssl ; then
	echo "CONFIG_TLS=openssl"    >> .config
	echo "CONFIG_SMARTCARD=y"    >> .config
	#elif use gnutls ; then
	#	echo "CONFIG_TLS=gnutls"     >> .config
	#	echo "CONFIG_GNUTLS_EXTRA=y" >> .config
	#else
	#	echo "CONFIG_TLS=internal"   >> .config
	#fi
	#if use kernel_linux ; then
	# Linux specific drivers
	echo "CONFIG_DRIVER_ATMEL=y"       >> .config
	#echo "CONFIG_DRIVER_BROADCOM=y"   >> .config
	#echo "CONFIG_DRIVER_HERMES=y"	   >> .config
	echo "CONFIG_DRIVER_HOSTAP=y"      >> .config
	echo "CONFIG_DRIVER_IPW=y"         >> .config
	echo "CONFIG_DRIVER_NDISWRAPPER=y" >> .config
	echo "CONFIG_DRIVER_NL80211=y"     >> .config
	#echo "CONFIG_DRIVER_PRISM54=y"    >> .config
	echo "CONFIG_DRIVER_RALINK=y"      >> .config
	echo "CONFIG_DRIVER_WEXT=y"        >> .config
	echo "CONFIG_DRIVER_WIRED=y"       >> .config
	#if use madwifi ; then
	# Add include path for madwifi-driver headers
	#echo "CFLAGS += -I/usr/include/madwifi" >> .config
	#echo "CONFIG_DRIVER_MADWIFI=y"          >> .config
	#fi
	#if use ps3 ; then
	#		echo "CONFIG_DRIVER_PS3=y" >> .config
	#	fi
	#elif use kernel_FreeBSD ; then
	#	# FreeBSD specific driver
	#	echo "CONFIG_DRIVER_BSD=y" >> .config
	#fi
	# Wi-Fi Protected Setup (WPS)
	#if use wps ; then
	#	echo "CONFIG_WPS=y" >> .config
	#fi
	# Enable mitigation against certain attacks against TKIP
	echo "CONFIG_DELAYED_MIC_ERROR_REPORT=y" >> .config
	#if use qt4 ; then
	#	cd "${S}"/wpa_gui-qt4
	#	eqmake4 wpa_gui.pro
	#fi
}
pkg_postinst() {
	einfo "If this is a clean installation of wpa_supplicant, you"
	einfo "have to create a configuration file named"
	einfo "/etc/wpa_supplicant/wpa_supplicant.conf"
	einfo
}

pbs_build() {
	ypkg_make
	#
	#if use qt4 ; then
	#	cd "${S}"/wpa_gui-qt4
	#	einfo "Building wpa_gui"
	#	emake || die "wpa_gui compilation failed"
	#fi
}

pbs_install() {
	mkdir -p "$YPPATH_DEST"/sbin "$YPPATH_DEST"/usr/sbin "$YPPATH_DEST"/etc/dbus-1/system.d "$YPPATH_DEST"/usr/share/dbus-1/system-services  "$YPPATH_DEST"/var/run/wpa_supplicant
	cp wpa_cli wpa_supplicant wpa_passphrase "$YPPATH_DEST"/sbin
	for i in wpa_cli wpa_supplicant wpa_passphrase;do
		ln -sf  /sbin/${i}  "$YPPATH_DEST"/usr/sbin/${i}
	done
	cp dbus/dbus-wpa_supplicant.conf  "$YPPATH_DEST"/etc/dbus-1/system.d/wpa_supplicant.conf
	cp dbus/{fi.epitest.hostap.WPASupplicant.service,fi.w1.wpa_supplicant1.service}  "$YPPATH_DEST"/usr/share/dbus-1/system-services/
	
	#
	install -d -m755 "$YPPATH_DEST"/usr/share/doc/"$N-$V$R"
	cp -a ChangeLog README examples "$YPPATH_DEST"/usr/share/doc/"$N-$V$R"
	#
	#if use qt4 ; then
	#	dobin wpa_gui-qt4/wpa_gui || die
	#	doicon wpa_gui-qt4/icons/wpa_gui.svg || die "Icon not found"
	#	make_desktop_entry wpa_gui "WPA Supplicant Administration GUI" "wpa_gui" "Qt;Network;"
	#fi
}	
