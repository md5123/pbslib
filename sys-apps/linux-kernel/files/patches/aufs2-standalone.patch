aufs2.1 standalone patch for linux-2.6.

--- a/fs/file_table.c
+++ b/fs/file_table.c
@@ -393,6 +393,8 @@ void file_sb_list_del(struct file *file)
 	}
 }
 
+EXPORT_SYMBOL_GPL(file_sb_list_del);
+
 #ifdef CONFIG_SMP
 
 /*
--- a/fs/inode.c
+++ b/fs/inode.c
@@ -82,6 +82,7 @@ static struct hlist_head *inode_hashtabl
  * the i_state of an inode while it is in use..
  */
 DEFINE_SPINLOCK(inode_lock);
+EXPORT_SYMBOL_GPL(inode_lock);
 
 /*
  * iprune_sem provides exclusion between the kswapd or try_to_free_pages
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -347,6 +347,7 @@ int deny_write_access(struct file * file
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(deny_write_access);
 
 /**
  * path_get - get a reference to a path
@@ -1165,6 +1166,7 @@ struct dentry *lookup_hash(struct nameid
 {
 	return __lookup_hash(&nd->last, nd->path.dentry, nd);
 }
+EXPORT_SYMBOL_GPL(lookup_hash);
 
 int __lookup_one_len(const char *name, struct qstr *this,
 		struct dentry *base, int len)
@@ -1187,6 +1189,7 @@ int __lookup_one_len(const char *name, s
 	this->hash = end_name_hash(hash);
 	return 0;
 }
+EXPORT_SYMBOL_GPL(__lookup_one_len);
 
 /**
  * lookup_one_len - filesystem helper to lookup single pathname component
--- a/fs/namespace.c
+++ b/fs/namespace.c
@@ -1321,6 +1321,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(iterate_mounts);
 
 static void cleanup_group_ids(struct vfsmount *mnt, struct vfsmount *end)
 {
--- a/fs/notify/group.c
+++ b/fs/notify/group.c
@@ -22,6 +22,7 @@
 #include <linux/srcu.h>
 #include <linux/rculist.h>
 #include <linux/wait.h>
+#include <linux/module.h>
 
 #include <linux/fsnotify_backend.h>
 #include "fsnotify.h"
@@ -70,6 +71,7 @@ void fsnotify_put_group(struct fsnotify_
 	if (atomic_dec_and_test(&group->refcnt))
 		fsnotify_destroy_group(group);
 }
+EXPORT_SYMBOL_GPL(fsnotify_put_group);
 
 /*
  * Create a new fsnotify_group and hold a reference for the group returned.
@@ -102,3 +104,4 @@ struct fsnotify_group *fsnotify_alloc_gr
 
 	return group;
 }
+EXPORT_SYMBOL_GPL(fsnotify_alloc_group);
--- a/fs/notify/mark.c
+++ b/fs/notify/mark.c
@@ -113,6 +113,7 @@ void fsnotify_put_mark(struct fsnotify_m
 	if (atomic_dec_and_test(&mark->refcnt))
 		mark->free_mark(mark);
 }
+EXPORT_SYMBOL_GPL(fsnotify_put_mark);
 
 /*
  * Any time a mark is getting freed we end up here.
@@ -190,6 +191,7 @@ void fsnotify_destroy_mark(struct fsnoti
 	if (unlikely(atomic_dec_and_test(&group->num_marks)))
 		fsnotify_final_destroy_group(group);
 }
+EXPORT_SYMBOL_GPL(fsnotify_destroy_mark);
 
 void fsnotify_set_mark_mask_locked(struct fsnotify_mark *mark, __u32 mask)
 {
@@ -277,6 +279,7 @@ err:
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(fsnotify_add_mark);
 
 /*
  * clear any marks in a group in which mark->flags & flags is true
@@ -332,6 +335,7 @@ void fsnotify_init_mark(struct fsnotify_
 	atomic_set(&mark->refcnt, 1);
 	mark->free_mark = free_mark;
 }
+EXPORT_SYMBOL_GPL(fsnotify_init_mark);
 
 static int fsnotify_mark_destroy(void *ignored)
 {
--- a/fs/open.c
+++ b/fs/open.c
@@ -60,6 +60,7 @@ int do_truncate(struct dentry *dentry, l
 	mutex_unlock(&dentry->d_inode->i_mutex);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 static long do_sys_truncate(const char __user *pathname, loff_t length)
 {
--- a/fs/splice.c
+++ b/fs/splice.c
@@ -1116,6 +1116,7 @@ long do_splice_from(struct pipe_inode_in
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -1142,6 +1143,7 @@ long do_splice_to(struct file *in, loff_
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -929,3 +929,4 @@ int cap_file_mmap(struct file *file, uns
 	}
 	return ret;
 }
+EXPORT_SYMBOL_GPL(cap_file_mmap);
--- a/security/device_cgroup.c
+++ b/security/device_cgroup.c
@@ -515,6 +515,7 @@ found:
 
 	return -EPERM;
 }
+EXPORT_SYMBOL_GPL(devcgroup_inode_permission);
 
 int devcgroup_inode_mknod(int mode, dev_t dev)
 {
--- a/security/security.c
+++ b/security/security.c
@@ -360,6 +360,7 @@ int security_path_mkdir(struct path *dir
 		return 0;
 	return security_ops->path_mkdir(dir, dentry, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_mkdir);
 
 int security_path_rmdir(struct path *dir, struct dentry *dentry)
 {
@@ -367,6 +368,7 @@ int security_path_rmdir(struct path *dir
 		return 0;
 	return security_ops->path_rmdir(dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 int security_path_unlink(struct path *dir, struct dentry *dentry)
 {
@@ -374,6 +376,7 @@ int security_path_unlink(struct path *di
 		return 0;
 	return security_ops->path_unlink(dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_unlink);
 
 int security_path_symlink(struct path *dir, struct dentry *dentry,
 			  const char *old_name)
@@ -382,6 +385,7 @@ int security_path_symlink(struct path *d
 		return 0;
 	return security_ops->path_symlink(dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -390,6 +394,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return security_ops->path_link(old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 int security_path_rename(struct path *old_dir, struct dentry *old_dentry,
 			 struct path *new_dir, struct dentry *new_dentry)
@@ -400,6 +405,7 @@ int security_path_rename(struct path *ol
 	return security_ops->path_rename(old_dir, old_dentry, new_dir,
 					 new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rename);
 
 int security_path_truncate(struct path *path)
 {
@@ -407,6 +413,7 @@ int security_path_truncate(struct path *
 		return 0;
 	return security_ops->path_truncate(path);
 }
+EXPORT_SYMBOL_GPL(security_path_truncate);
 
 int security_path_chmod(struct dentry *dentry, struct vfsmount *mnt,
 			mode_t mode)
@@ -415,6 +422,7 @@ int security_path_chmod(struct dentry *d
 		return 0;
 	return security_ops->path_chmod(dentry, mnt, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 int security_path_chown(struct path *path, uid_t uid, gid_t gid)
 {
@@ -422,6 +430,7 @@ int security_path_chown(struct path *pat
 		return 0;
 	return security_ops->path_chown(path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 int security_path_chroot(struct path *path)
 {
@@ -498,6 +507,7 @@ int security_inode_readlink(struct dentr
 		return 0;
 	return security_ops->inode_readlink(dentry);
 }
+EXPORT_SYMBOL_GPL(security_inode_readlink);
 
 int security_inode_follow_link(struct dentry *dentry, struct nameidata *nd)
 {
@@ -512,6 +522,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return security_ops->inode_permission(inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -611,6 +622,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
@@ -638,6 +650,7 @@ int security_file_mmap(struct file *file
 		return ret;
 	return ima_file_mmap(file, prot);
 }
+EXPORT_SYMBOL_GPL(security_file_mmap);
 
 int security_file_mprotect(struct vm_area_struct *vma, unsigned long reqprot,
 			    unsigned long prot)
