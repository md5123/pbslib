diff -ur linux-kernel-3.0.20-ylmf1/fs/proc/nommu.c linux-kernel-3.0.20-ylmf1.new//fs/proc/nommu.c
--- linux-kernel-3.0.20-ylmf1/fs/proc/nommu.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//fs/proc/nommu.c	2012-04-25 14:03:17.162809915 +0800
@@ -46,6 +46,10 @@
 
 	if (file) {
 		struct inode *inode = region->vm_file->f_path.dentry->d_inode;
+		if (region->vm_prfile) {
+			file = region->vm_prfile;
+			inode = file->f_path.dentry->d_inode;
+		}	
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 	}
diff -ur linux-kernel-3.0.20-ylmf1/fs/proc/task_mmu.c linux-kernel-3.0.20-ylmf1.new//fs/proc/task_mmu.c
--- linux-kernel-3.0.20-ylmf1/fs/proc/task_mmu.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//fs/proc/task_mmu.c	2012-04-25 14:04:26.057495915 +0800
@@ -220,6 +220,10 @@
 
 	if (file) {
 		struct inode *inode = vma->vm_file->f_path.dentry->d_inode;
+		if (vma->vm_prfile) {
+			file = vma->vm_prfile;
+		        inode = file->f_path.dentry->d_inode;
+		}
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
@@ -1034,6 +1038,8 @@
 
 	if (file) {
 		seq_printf(m, " file=");
+		if (vma->vm_prfile)
+			file = vma->vm_prfile;
 		seq_path(m, &file->f_path, "\n\t= ");
 	} else if (vma->vm_start <= mm->brk && vma->vm_end >= mm->start_brk) {
 		seq_printf(m, " heap");
diff -ur linux-kernel-3.0.20-ylmf1/fs/proc/task_nommu.c linux-kernel-3.0.20-ylmf1.new//fs/proc/task_nommu.c
--- linux-kernel-3.0.20-ylmf1/fs/proc/task_nommu.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//fs/proc/task_nommu.c	2012-04-25 14:04:58.988144361 +0800
@@ -148,6 +148,10 @@
 
 	if (file) {
 		struct inode *inode = vma->vm_file->f_path.dentry->d_inode;
+		if (vma->vm_prfile) {
+			file = vma->vm_prfile;
+			inode = file->f_path.dentry->d_inode;
+		}	
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = (loff_t)vma->vm_pgoff << PAGE_SHIFT;
diff -ur linux-kernel-3.0.20-ylmf1/include/linux/mm_types.h linux-kernel-3.0.20-ylmf1.new//include/linux/mm_types.h
--- linux-kernel-3.0.20-ylmf1/include/linux/mm_types.h	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//include/linux/mm_types.h	2012-04-25 14:05:41.915658152 +0800
@@ -131,6 +131,7 @@
 	unsigned long	vm_top;		/* region allocated to here */
 	unsigned long	vm_pgoff;	/* the offset in vm_file corresponding to vm_start */
 	struct file	*vm_file;	/* the backing file or NULL */
+	struct file     *vm_prfile;     /* the virtual backing file or NULL */
 
 	int		vm_usage;	/* region usage count (access under nommu_region_sem) */
 	bool		vm_icache_flushed : 1; /* true if the icache has been flushed for
@@ -190,6 +191,7 @@
 	unsigned long vm_pgoff;		/* Offset (within vm_file) in PAGE_SIZE
 					   units, *not* PAGE_CACHE_SIZE */
 	struct file * vm_file;		/* File we map to (can be NULL). */
+	struct file *vm_prfile;         /* shadow of vm_file */
 	void * vm_private_data;		/* was vm_pte (shared mem) */
 
 #ifndef CONFIG_MMU
diff -ur linux-kernel-3.0.20-ylmf1/kernel/fork.c linux-kernel-3.0.20-ylmf1.new//kernel/fork.c
--- linux-kernel-3.0.20-ylmf1/kernel/fork.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//kernel/fork.c	2012-04-25 14:06:23.966489952 +0800
@@ -380,6 +380,8 @@
 			struct address_space *mapping = file->f_mapping;
 
 			get_file(file);
+			if (tmp->vm_prfile)
+				get_file(tmp->vm_prfile);
 			if (tmp->vm_flags & VM_DENYWRITE)
 				atomic_dec(&inode->i_writecount);
 			mutex_lock(&mapping->i_mmap_mutex);
diff -ur linux-kernel-3.0.20-ylmf1/mm/memory.c linux-kernel-3.0.20-ylmf1.new//mm/memory.c
--- linux-kernel-3.0.20-ylmf1/mm/memory.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//mm/memory.c	2012-04-25 14:07:08.670709691 +0800
@@ -2633,6 +2633,8 @@
 		/* file_update_time outside page_lock */
 		if (vma->vm_file)
 			file_update_time(vma->vm_file);
+		if (vma->vm_prfile)
+			file_update_time(vma->vm_prfile);
 
 		return ret;
 	}
@@ -3313,6 +3315,8 @@
 		/* file_update_time outside page_lock */
 		if (vma->vm_file)
 			file_update_time(vma->vm_file);
+		if (vma->vm_prfile)
+			file_update_time(vma->vm_prfile);
 	} else {
 		unlock_page(vmf.page);
 		if (anon)
diff -ur linux-kernel-3.0.20-ylmf1/mm/mmap.c linux-kernel-3.0.20-ylmf1.new//mm/mmap.c
--- linux-kernel-3.0.20-ylmf1/mm/mmap.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//mm/mmap.c	2012-04-25 14:12:47.460829431 +0800
@@ -240,6 +240,8 @@
 		vma->vm_ops->close(vma);
 	if (vma->vm_file) {
 		fput(vma->vm_file);
+		if (vma->vm_prfile)
+			fput(vma->vm_prfile);
 		if (vma->vm_flags & VM_EXECUTABLE)
 			removed_exe_file_vma(vma->vm_mm);
 	}
@@ -627,6 +629,8 @@
 	if (remove_next) {
 		if (file) {
 			fput(file);
+			if (vma->vm_prfile)
+				fput(vma->vm_prfile);
 			if (next->vm_flags & VM_EXECUTABLE)
 				removed_exe_file_vma(mm);
 		}
@@ -1973,6 +1977,8 @@
 
 	if (new->vm_file) {
 		get_file(new->vm_file);
+		if (new->vm_prfile)
+			get_file(new->vm_prfile);
 		if (vma->vm_flags & VM_EXECUTABLE)
 			added_exe_file_vma(mm);
 	}
@@ -1997,6 +2003,8 @@
 		if (vma->vm_flags & VM_EXECUTABLE)
 			removed_exe_file_vma(mm);
 		fput(new->vm_file);
+		if (new->vm_prfile)
+			fput(new->vm_prfile);
 	}
 	unlink_anon_vmas(new);
  out_free_mpol:
@@ -2364,6 +2372,8 @@
 			new_vma->vm_pgoff = pgoff;
 			if (new_vma->vm_file) {
 				get_file(new_vma->vm_file);
+				if (new_vma->vm_prfile)
+					get_file(new_vma->vm_prfile);
 				if (vma->vm_flags & VM_EXECUTABLE)
 					added_exe_file_vma(mm);
 			}
diff -ur linux-kernel-3.0.20-ylmf1/mm/nommu.c linux-kernel-3.0.20-ylmf1.new//mm/nommu.c
--- linux-kernel-3.0.20-ylmf1/mm/nommu.c	2012-02-07 01:31:45.000000000 +0800
+++ linux-kernel-3.0.20-ylmf1.new//mm/nommu.c	2012-04-25 14:15:32.874185086 +0800
@@ -634,6 +634,8 @@
 
 		if (region->vm_file)
 			fput(region->vm_file);
+	        if (region->vm_prfile)
+			fput(region->vm_prfile);
 
 		/* IO memory and memory shared directly out of the pagecache
 		 * from ramfs/tmpfs mustn't be released here */
@@ -790,6 +792,8 @@
 		vma->vm_ops->close(vma);
 	if (vma->vm_file) {
 		fput(vma->vm_file);
+		if (vma->vm_prfile)
+			fput(vma->vm_prfile);
 		if (vma->vm_flags & VM_EXECUTABLE)
 			removed_exe_file_vma(mm);
 	}
@@ -1363,6 +1367,8 @@
 				}
 			}
 			fput(region->vm_file);
+			if (region->vm_prfile)
+				 fput(region->vm_prfile);
 			kmem_cache_free(vm_region_jar, region);
 			region = pregion;
 			result = start;
@@ -1439,9 +1445,13 @@
 error:
 	if (region->vm_file)
 		fput(region->vm_file);
+	if (region->vm_prfile)
+		fput(region->vm_prfile);
 	kmem_cache_free(vm_region_jar, region);
 	if (vma->vm_file)
 		fput(vma->vm_file);
+	if (vma->vm_prfile)
+		fput(vma->vm_prfile);
 	if (vma->vm_flags & VM_EXECUTABLE)
 		removed_exe_file_vma(vma->vm_mm);
 	kmem_cache_free(vm_area_cachep, vma);
