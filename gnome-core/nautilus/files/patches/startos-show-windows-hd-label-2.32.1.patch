diff -ur nautilus-2.32.1/libnautilus-private/nautilus-global-preferences.c nautilus-2.32.1.new//libnautilus-private/nautilus-global-preferences.c
--- nautilus-2.32.1/libnautilus-private/nautilus-global-preferences.c	2010-11-13 19:59:01.000000000 +0800
+++ nautilus-2.32.1.new//libnautilus-private/nautilus-global-preferences.c	2011-09-14 10:56:12.618923352 +0800
@@ -518,6 +518,11 @@
 	  NULL,
 	  default_network_link_name, g_free,
 	},
+	
+	{ NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER,
+	  PREFERENCE_BOOLEAN,
+	  GINT_TO_POINTER (TRUE)
+	},
 
 	{ NAUTILUS_PREFERENCES_MEDIA_AUTOMOUNT,
 	  PREFERENCE_BOOLEAN,
diff -ur nautilus-2.32.1/libnautilus-private/nautilus-global-preferences.h nautilus-2.32.1.new//libnautilus-private/nautilus-global-preferences.h
--- nautilus-2.32.1/libnautilus-private/nautilus-global-preferences.h	2010-11-13 19:59:01.000000000 +0800
+++ nautilus-2.32.1.new//libnautilus-private/nautilus-global-preferences.h	2011-09-14 10:56:44.506307216 +0800
@@ -53,6 +53,9 @@
 #define NAUTILUS_PREFERENCES_MEDIA_AUTOMOUNT	                "preferences/media_automount"
 #define NAUTILUS_PREFERENCES_MEDIA_AUTOMOUNT_OPEN		"preferences/media_automount_open"
 
+/* Show drive letter options */
+#define NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER                  "preferences/show_drive_letter"
+
 /* Autorun options */
 #define NAUTILUS_PREFERENCES_MEDIA_AUTORUN_NEVER                "preferences/media_autorun_never"
 #define NAUTILUS_PREFERENCES_MEDIA_AUTORUN_X_CONTENT_START_APP  "preferences/media_autorun_x_content_start_app"
diff -ur nautilus-2.32.1/po/en_GB.po nautilus-2.32.1.new//po/en_GB.po
--- nautilus-2.32.1/po/en_GB.po	2010-09-16 00:53:09.000000000 +0800
+++ nautilus-2.32.1.new//po/en_GB.po	2011-09-14 10:54:13.036235034 +0800
@@ -6732,6 +6732,10 @@
 msgid "_Search"
 msgstr "_Search"
 
+#: ../src/nautilus-navigation-window-menus.c:892
+msgid "Show Drive Letter"
+msgstr "Show Drive Letter"
+
 #: ../src/nautilus-navigation-window-pane.c:396
 msgid "_Close Tab"
 msgstr "_Close Tab"
diff -ur nautilus-2.32.1/po/zh_CN.po nautilus-2.32.1.new//po/zh_CN.po
--- nautilus-2.32.1/po/zh_CN.po	2011-09-14 10:52:55.181152566 +0800
+++ nautilus-2.32.1.new//po/zh_CN.po	2011-09-14 10:55:03.210696082 +0800
@@ -6891,6 +6891,10 @@
 msgid "_Search for:"
 msgstr "搜索(_S)："
 
+#: ../src/nautilus-navigation-window-menus.c:892
+msgid "Show Drive Letter"
+msgstr "显示盘符"
+
 #: ../src/nautilus-query-editor.c:1083
 msgid "Search results"
 msgstr "搜索结果"
diff -ur nautilus-2.32.1/po/zh_TW.po nautilus-2.32.1.new//po/zh_TW.po
--- nautilus-2.32.1/po/zh_TW.po	2011-09-14 10:52:55.141151667 +0800
+++ nautilus-2.32.1.new//po/zh_TW.po	2011-09-14 10:55:31.898007682 +0800
@@ -6615,6 +6615,10 @@
 msgid "_Search"
 msgstr "搜尋(_S)"
 
+#: ../src/nautilus-navigation-window-menus.c:892
+msgid "Show Drive Letter"
+msgstr "顯示盤符"
+
 #: ../src/nautilus-navigation-window-pane.c:396
 msgid "_Close Tab"
 msgstr "關閉分頁(_C)"
diff -ur nautilus-2.32.1/src/nautilus-actions.h nautilus-2.32.1.new//src/nautilus-actions.h
--- nautilus-2.32.1/src/nautilus-actions.h	2010-05-21 07:36:16.000000000 +0800
+++ nautilus-2.32.1.new//src/nautilus-actions.h	2011-09-14 10:57:10.830232725 +0800
@@ -52,5 +52,6 @@
 #define NAUTILUS_ACTION_SEARCH "Search"
 #define NAUTILUS_ACTION_FOLDER_WINDOW "Folder Window"
 #define NAUTILUS_ACTION_NEW_TAB "New Tab"
+#define NAUTILUS_ACTION_SHOW_DRIVE_LETTER "Show Drive Letter"
 
 #endif /* NAUTILUS_ACTIONS_H */
diff -ur nautilus-2.32.1/src/nautilus-navigation-window-menus.c nautilus-2.32.1.new//src/nautilus-navigation-window-menus.c
--- nautilus-2.32.1/src/nautilus-navigation-window-menus.c	2010-11-13 19:59:01.000000000 +0800
+++ nautilus-2.32.1.new//src/nautilus-navigation-window-menus.c	2011-09-14 11:00:34.451020752 +0800
@@ -278,6 +278,25 @@
 	}
 }
 
+static void
+action_show_drive_letter_callback(GtkAction *action,
+                                 gpointer user_data)
+{
+       NautilusNavigationWindow *window;
+
+       window = NAUTILUS_NAVIGATION_WINDOW (user_data);
+
+       if (gtk_toggle_action_get_active (GTK_TOGGLE_ACTION (action)))
+       {
+              eel_preferences_set_boolean(NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER, TRUE);
+       }
+       else
+       {
+               eel_preferences_set_boolean(NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER, FALSE);
+       }
+}
+
+
 void
 nautilus_navigation_window_update_show_hide_menu_items (NautilusNavigationWindow *window) 
 {
@@ -309,6 +328,10 @@
 					      NAUTILUS_ACTION_SHOW_HIDE_EXTRA_PANE);
 	gtk_toggle_action_set_active (GTK_TOGGLE_ACTION (action),
 				      nautilus_navigation_window_split_view_showing (window));
+	action = gtk_action_group_get_action (window->details->navigation_action_group,
+	                                      NAUTILUS_ACTION_SHOW_DRIVE_LETTER);
+	gtk_toggle_action_set_active (GTK_TOGGLE_ACTION (action),
+	                              eel_preferences_get_boolean (NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER));
 }
 
 void
@@ -871,6 +894,11 @@
   /* tooltip */              N_("Open an extra folder view side-by-side"),
                              G_CALLBACK (action_split_view_callback),
   /* is_active */            FALSE },
+  /* name, stock id */     { "Show Drive Letter", NULL,
+  /* label, accelerator */   N_("Show Drive Letter"), NULL,
+  /* tooltip */              N_("Show drive letter in the sidebar"),
+                              G_CALLBACK (action_show_drive_letter_callback),
+  /* is_active */            TRUE },
 };
 
 void 
@@ -1009,4 +1037,8 @@
 	nautilus_navigation_window_update_spatial_menu_item (window);
 
 	nautilus_navigation_window_initialize_go_menu (window);
+	eel_preferences_add_callback_while_alive(NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER,
+                                                nautilus_navigation_window_update_show_hide_menu_items,
+                                                window,
+                                                G_OBJECT(window));
 }
diff -ur nautilus-2.32.1/src/nautilus-navigation-window-ui.xml nautilus-2.32.1.new//src/nautilus-navigation-window-ui.xml
--- nautilus-2.32.1/src/nautilus-navigation-window-ui.xml	2010-05-21 07:36:16.000000000 +0800
+++ nautilus-2.32.1.new//src/nautilus-navigation-window-ui.xml	2011-09-14 11:01:01.088207896 +0800
@@ -25,6 +25,7 @@
 			<menuitem name="Show Hide Location Bar" action="Show Hide Location Bar"/>
 			<menuitem name="Show Hide Statusbar" action="Show Hide Statusbar"/>
 			<menuitem name="Show Hide Extra Pane" action="Show Hide Extra Pane"/>
+			<menuitem name="Show Drive Letter" action="Show Drive Letter"/>
 		</placeholder>
 	</menu>
         <placeholder name="Other Menus">
diff -ur nautilus-2.32.1/src/nautilus-places-sidebar.c nautilus-2.32.1.new//src/nautilus-places-sidebar.c
--- nautilus-2.32.1/src/nautilus-places-sidebar.c	2010-11-13 19:59:02.000000000 +0800
+++ nautilus-2.32.1.new//src/nautilus-places-sidebar.c	2011-09-14 11:13:55.520170718 +0800
@@ -48,12 +48,17 @@
 #include <libnautilus-private/nautilus-window-slot-info.h>
 #include <gio/gio.h>
 
+#include <dbus/dbus-glib.h>
+
 #include "nautilus-bookmark-list.h"
 #include "nautilus-places-sidebar.h"
 #include "nautilus-window.h"
 
 #define EJECT_BUTTON_XPAD 5
 
+#define DBUS_NAME "org.ylmf.nautilus"
+#define INTERFACE "org.ylmf.nautilus.ShowDL"
+
 typedef struct {
 	GtkScrolledWindow  parent;
 	GtkTreeView        *tree_view;
@@ -149,10 +154,13 @@
 
 static void bookmarks_check_popup_sensitivity          (NautilusPlacesSidebar *sidebar);
 
+static char * get_drive_letter_name                    (GMount *mount);
+
+
 /* Identifiers for target types */
 enum {
-  GTK_TREE_MODEL_ROW,
-  TEXT_URI_LIST
+	GTK_TREE_MODEL_ROW,
+	TEXT_URI_LIST
 };
 
 /* Target types for dragging from the shortcuts list */
@@ -169,7 +177,6 @@
 /* Drag and drop interface declarations */
 typedef struct {
   GtkTreeModelFilter parent;
-
   NautilusPlacesSidebar *sidebar;
 } NautilusShortcutsModelFilter;
 
@@ -314,6 +321,12 @@
 	NautilusWindowSlotInfo *slot;
 	char *tooltip;
 
+	char buf[1024];
+	char cmd[1024];
+
+        memset(buf, '\0', sizeof(buf));
+	memset(cmd, '\0', sizeof(cmd));
+
 	model = NULL;
 	last_uri = NULL;
 	select_path = NULL;
@@ -403,6 +416,112 @@
 					root = g_mount_get_default_location (mount);
 					mount_uri = g_file_get_uri (root);
 					name = g_mount_get_name (mount);
+                                       /*
+                                       if (eel_preferences_get_boolean(NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER))
+                                       {
+                                               name  = get_drive_letter_name(mount);
+                                       }
+                                       */
+                                       
+                                       if (eel_preferences_get_boolean(NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER) && g_file_get_path(root))
+                                       {
+                                               DBusGConnection *bus;
+                                               DBusGProxy *remote_object;
+                                               DBusGProxy *remote_object_introspectable;
+                                               GError *error = NULL;
+                                               char *reply;
+                                               char *introspect_data;
+                                             FILE *stream;
+
+
+                                               g_type_init ();
+
+                                               bus = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
+                                               if (!bus){
+                                                       g_error("Couldn't connect to system bus :%s", error->message);
+                                                       g_error_free(error);
+                                                       error = NULL;
+                                               }
+
+                                               remote_object = dbus_g_proxy_new_for_name (bus,
+                                                                                          DBUS_NAME,
+                                                                                          "/",
+                                                                                          INTERFACE
+                                                                                          );
+                                               strcpy(buf, g_file_get_path(root));
+                                               
+                                               sprintf(cmd, "mount | grep '%s' | awk '{print $1}'", buf);
+                                               stream = popen(cmd, "r");
+
+                                               memset(buf, '\0', sizeof(buf));
+                                               memset(cmd, '\0', sizeof(cmd));
+                                              
+                                               fread(buf, sizeof(char), sizeof(buf), stream);
+                                               int i ;
+                                               
+                                               for(i = 0; i < strlen(buf); i++)
+                                               {
+                                                       if (buf[i] == '\n')
+                                                              buf[i] = '\0';
+                                               }
+
+                                               if(buf[6] == 'd')
+                                               {
+                                               
+                                                       dbus_g_proxy_set_default_timeout(remote_object,1000000000);
+                                                       if (!dbus_g_proxy_call (remote_object, "showdriveletter", &error,
+                                                                               G_TYPE_STRING, buf,
+                                                                               G_TYPE_INVALID,
+                                                                               G_TYPE_STRING, &reply,
+                                                                               G_TYPE_INVALID)){
+                                                               g_error("Failed to complete \"%s\":%s\n","org.ylmf.nautilus.interface",error->message);
+                                                               g_error_free(error);
+                                                               error = NULL;
+                                                       }
+                                               
+                                                       memset(buf, '\0', sizeof(buf));
+                                                       memset(cmd, '\0', sizeof(cmd));
+                                                       //              g_print("driveletter:%s\n",  reply);
+                                               }
+                                               else
+                                               {
+                                                       reply = NULL;
+                                               }
+
+                                               if(reply == NULL || reply[0] == 0x00)
+                                               {
+                                                       name = g_mount_get_name (mount);
+                                               }
+                                               else
+                                               {
+                                                       /*If the volume defined by the user display name. Otherwise, display the drive letter defined*/
+                                                       name = g_volume_get_identifier(volume, G_VOLUME_IDENTIFIER_KIND_LABEL);
+                                                       if(name != NULL && name[0] != 0x00)
+                                                       {
+                                                               name = g_strdup_printf("%s (%s)", name, reply);
+                                                       }
+                                                       else
+                                                       {
+                                                               
+                                                               name = g_strdup(reply);
+                                                       }
+                                                       
+                                               }
+
+                                               
+                                               
+                                               g_free(reply);
+                                               pclose(stream);
+	
+                                               g_object_unref (G_OBJECT (remote_object));
+                                               g_object_unref (G_OBJECT (remote_object_introspectable));
+                                       }
+                                       else
+                                       {
+                                               name =  g_mount_get_name(mount);
+
+                                       }
+
 					tooltip = g_file_get_parse_name (root);
 					last_iter = add_place (sidebar, PLACES_MOUNTED_VOLUME,
 							       name, icon, mount_uri,
@@ -1490,6 +1609,84 @@
 	g_free (uri);
 }
 
+/*Enter the path to the drive get the drive letter name*/
+static char *
+get_drive_letter_name(GMount *mount)
+{
+       static char *tmp = "jjj";
+       
+       /*
+       DBusGConnection *bus;
+       DBusGProxy *remote_object;
+       DBusGProxy *remote_object_introspectable;
+       GError *error = NULL;
+       char *reply;
+       char *introspect_data;
+       FILE *stream;
+       gchar *cmd;
+       gchar *buf;
+       
+       g_type_init ();
+
+       bus = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
+       if (!bus){
+               g_error("Couldn't connect to system bus :%s", error->message);
+               g_error_free(error);
+               error = NULL;
+       }
+
+       remote_object = dbus_g_proxy_new_for_name (bus,
+                                                  DBUS_NAME,
+                                                  "/",
+                                                  INTERFACE
+                                                  );
+               
+       cmd = g_strdup_printf("mount | grep '%s' | awk '{print $1}'", g_file_get_path( g_mount_get_default_location (mount)));
+                                               
+       stream = popen(cmd, "r");
+                                               
+       fread(buf, sizeof(char), 9, stream);
+       
+       if(buf[6] == 'd')
+       {
+                                               
+               dbus_g_proxy_set_default_timeout(remote_object,1000000000);
+               if (!dbus_g_proxy_call (remote_object, "showdriveletter", &error,
+                                       G_TYPE_STRING, buf,
+                                       G_TYPE_INVALID,
+                                       G_TYPE_STRING, &reply,
+                                       G_TYPE_INVALID))
+               {
+                       g_error("Failed to complete \"%s\":%s\n","org.ylmf.nautilus.interface",error->message);
+                       g_error_free(error);
+                      error = NULL;
+               }
+       }
+       else
+       {
+               reply = NULL;
+       }
+       
+       g_free(buf);
+       g_free(cmd);
+       pclose(stream);
+       g_object_unref (G_OBJECT (remote_object));
+       g_object_unref (G_OBJECT (remote_object_introspectable));
+       if(reply == NULL || reply[0] == 0x00)
+       {
+               return g_mount_get_name(mount);
+       }
+       else
+       {
+               return reply;
+       }
+       */
+       return tmp;
+                                               
+
+}
+
+
 /* Callback used when the selection in the shortcuts tree changes */
 static void
 bookmarks_selection_changed_cb (GtkTreeSelection      *selection,
@@ -2781,6 +2978,11 @@
 	g_signal_connect_object (sidebar->volume_monitor, "drive_changed",
 				 G_CALLBACK (drive_changed_callback), sidebar, 0);
 
+	eel_preferences_add_callback_while_alive(NAUTILUS_PREFERENCES_SHOW_DRIVE_LETTER,
+	                                                update_places,
+	                                                sidebar,
+	                                                G_OBJECT(sidebar));
+	
 	update_places (sidebar);
 }
 
