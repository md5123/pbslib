#
# YLmf_OS package build script
#

DESCRIPTION="The Parma Polyhedra Library provides numerical abstractions for analysis of complex systems"
HOMEPAGE="http://www.cs.unipr.it/ppl/"
LICENSE="GPL"
PACKAGER="Ylmf OS Developers <ylmfos@115.com>"

SRC_URI="http://www.cs.unipr.it/ppl/Download/ftp/releases/"$V$R"/"$N-$V$R".tar.bz2"

RDEPEND=""
BDEPEND=""
RECOMMENDED=""
CONFLICT=""

pbs_unpack() {
        dounpack
}

pbs_config() {
	config+="--disable-optimization"
	doconfig
}

pbs_build() {
	domake
}

pbs_install() {
	domkinstall
#		cd "$destdir"
#		case $ARCH in
#			i?86)	mv usr/bin/ppl-config{,-32} 
#				mv usr/include/ppl{,-32}.hh ;;
#		      x86_64) 
#				# Prepare ppl-config to be wrapped by the multiarch wrapper and then wrap it
#				mv usr/bin/ppl-config{,-64}
#				doln /usr/bin/multiarch_wrapper usr/bin/ppl-config
#			
#				# Create the 64bit header file
#				mv usr/include/ppl{,-64}.hh
#		
#				# Create a stub header in the place of the originals	
#				cat >usr/include/ppl.hh << "EOF"
#	/* ppl.hh - Stub Header  */
#	#ifndef __STUB__PPL_HH__
#	#define __STUB__PPL_HH__
#
#	#if defined(__x86_64__) || \
#	    defined(__sparc64__) || \
#	    defined(__arch64__) || \
#	    defined(__powerpc64__) || \
#	    defined (__s390x__)
#	# include "ppl-64.h"
#	#else
#	# include "ppl-32.h"
#	#endif
#
#	#endif /* __STUB__PPL_HH__ */
#	EOF
#		esac
}

